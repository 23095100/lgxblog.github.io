(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{442:function(_,v,t){"use strict";t.r(v);var r=t(1),s=Object(r.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"系统开发与项目管理基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#系统开发与项目管理基础"}},[_._v("#")]),_._v(" 系统开发与项目管理基础")]),_._v(" "),v("h2",{attrs:{id:"_3-系统开发与项目管理基础"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-系统开发与项目管理基础"}},[_._v("#")]),_._v(" 3. 系统开发与项目管理基础")]),_._v(" "),v("h3",{attrs:{id:"_3-1-软件生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-软件生命周期"}},[_._v("#")]),_._v(" 3.1. 软件生命周期")]),_._v(" "),v("p",[_._v("软件产品从计划到软件交付使用， 直到最终退出为止的过程。包括"),v("strong",[_._v("可行性分析和项目开发计划")]),_._v("、"),v("strong",[_._v("需求分析")]),_._v("、"),v("strong",[_._v("概要设计")]),_._v("、"),v("strong",[_._v("详细设计")]),_._v("、"),v("strong",[_._v("编码")]),_._v("、"),v("strong",[_._v("测试")]),_._v("及"),v("strong",[_._v("维护")]),_._v("阶段。")]),_._v(" "),v("h3",{attrs:{id:"_3-2-软件开发模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-软件开发模型"}},[_._v("#")]),_._v(" 3.2. 软件开发模型")]),_._v(" "),v("p",[_._v("分为 "),v("strong",[_._v("瀑布模型")]),_._v("、"),v("strong",[_._v("螺旋模型")]),_._v("、"),v("strong",[_._v("喷泉模型")]),_._v("、"),v("strong",[_._v("原型化模型")]),_._v("、"),v("strong",[_._v("演化模型")])]),_._v(" "),v("p",[v("strong",[_._v("瀑布模型")]),_._v("：严格遵循软件生命周期各阶段的固定顺序， —个阶段完成再进入另一阶段， 适用于结构化开发方法。\n瀑布模型分为以下几个阶段：\n软件计划、需求分析、软件设计、程序编码、软件测试、运行维护\n瀑布模型的优点：")]),_._v(" "),v("ol",[v("li",[_._v("为项目提供按阶段划分的检查点。")]),_._v(" "),v("li",[_._v("当前阶段完成后， 只需关注后续阶段")]),_._v(" "),v("li",[_._v("可在迭代模型中应用瀑布模型")]),_._v(" "),v("li",[_._v("适用于大规模系统项目")])]),_._v(" "),v("p",[_._v("瀑布模型的缺点：")]),_._v(" "),v("ol",[v("li",[v("p",[_._v("各阶段划分完全固定， 阶段之间产生大量文档， 增加了工作量。")])]),_._v(" "),v("li",[v("p",[_._v("用户直到工程末期才能见到开发成果， 增加了开发风险。")])]),_._v(" "),v("li",[v("p",[_._v("不适应用户需求变化。")])])]),_._v(" "),v("p",[v("strong",[_._v("原型化模型")]),_._v("：开发人员对用户提出问题进行总结， 就主要需求达成—致意见， 开发—个原型并运行， 然后对原型进行反复修改， 使之完善。衡量原型化模型开发人员能力标准是快速获取需求能力。")]),_._v(" "),v("p",[_._v("优点： 用户需求清楚， 降低开发风险与成本用户参与决策， 减少项目管理， 要求完整的生命周期\n缺点： 不适用大型系统， 系统难于维护。")]),_._v(" "),v("p",[v("strong",[_._v("演化模型")]),_._v("：根据用户需求， 快速分析构造该软件的—个初始版本， 称之为原型， 根据用户在使用原型过程中提出的建议改进原型， 获得原型的新版本， 重复这一过程， 使用户最终获得满意的软件产品。")]),_._v(" "),v("p",[v("strong",[_._v("螺旋模型")]),_._v("：将瀑布模型和原型模型结合， 强调了其它模型所忽略的风险分析， 适合大型复杂系统。\n优点： 支持用户需求的动态变化， 降低风险。\n缺点： 增加开发成本")]),_._v(" "),v("p",[v("strong",[_._v("喷泉模型")]),_._v("：主要用于描述面向对象的开发过程， 核心的特点是迭代。所有开发活动没有明显边界， 允许各种开发活动交叉进行。")]),_._v(" "),v("h3",{attrs:{id:"_3-3-软件测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-软件测试"}},[_._v("#")]),_._v(" 3.3. 软件测试")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th"),_._v(" "),v("th",[_._v("别名")]),_._v(" "),v("th",[_._v("测试阶段")]),_._v(" "),v("th",[_._v("测试对象")]),_._v(" "),v("th",[_._v("测试人员")]),_._v(" "),v("th",[_._v("测试依据")]),_._v(" "),v("th",[_._v("测试方法")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("单元测试（UT）")]),_._v(" "),v("td",[_._v("组件测试/模块测试")]),_._v(" "),v("td",[_._v("在编码之后进行，检验代码的正确性")]),_._v(" "),v("td",[_._v("模块、类、函数和对象也可能是更小的单元（如：一行代码，一个单词）")]),_._v(" "),v("td",[_._v("白盒测试工程师或开发人员")]),_._v(" "),v("td",[_._v("依据代码、详细设计文档来进行测试")]),_._v(" "),v("td",[_._v("白盒测试")])]),_._v(" "),v("tr",[v("td",[_._v("集成测试（IT）")]),_._v(" "),v("td",[_._v("组装测试/联合测试")]),_._v(" "),v("td",[_._v("单元测试之后，检验模块间接口的正确性")]),_._v(" "),v("td",[_._v("模块间的接口")]),_._v(" "),v("td",[_._v("白盒测试工程师或开发人员")]),_._v(" "),v("td",[_._v("单元测试的文档、概要设计文档")]),_._v(" "),v("td",[_._v("黑盒测试+白盒测试")])]),_._v(" "),v("tr",[v("td",[_._v("系统测试（ST）")]),_._v(" "),v("td"),_._v(" "),v("td",[_._v("集成测试之后")]),_._v(" "),v("td",[_._v("整个系统(软件、硬件)")]),_._v(" "),v("td",[_._v("黑盒测试工程师")]),_._v(" "),v("td",[_._v("需求规格说明书")]),_._v(" "),v("td",[_._v("黑盒测试")])]),_._v(" "),v("tr",[v("td",[_._v("验收测试")]),_._v(" "),v("td",[_._v("交付测试")]),_._v(" "),v("td",[_._v("系统测试通过后")]),_._v(" "),v("td",[_._v("整个系统(软件、硬件)")]),_._v(" "),v("td",[_._v("最终用户或需求方")]),_._v(" "),v("td",[_._v("用户需求、验收标准")]),_._v(" "),v("td",[_._v("黑盒测试")])])])]),_._v(" "),v("p",[v("strong",[_._v("白盒测试")]),_._v("：需要了解程序内部结构，测试用例是根据程序内部逻辑来设计。白盒测试用于软件的单元测试。")]),_._v(" "),v("p",[v("strong",[_._v("黑盒测试")]),_._v("：对软件已经实现的功能是否满足需求进行测试和验证。黑盒测试不关心内部逻辑结构，只根据程序的功能说明来设计测试用例。黑盒测试用于软件的功能测试。")]),_._v(" "),v("p",[v("strong",[_._v("灰盒测试")]),_._v("：关注输出对于输入的正确性，同时也关注内部表现，但不像白盒那样详细完整。")]),_._v(" "),v("p",[v("strong",[_._v("测试的步骤")]),_._v("：单元测试、集成测试、系统测试、验收测试")]),_._v(" "),v("h3",{attrs:{id:"_3-4-项目管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-项目管理"}},[_._v("#")]),_._v(" 3.4. 项目管理")]),_._v(" "),v("p",[_._v("项目管理可分为九大类，分别是：范围管理，时间管理，成本管理，质量管理，人力资源管理，沟通管理，风险管理，采购管理，整体管理。")]),_._v(" "),v("h4",{attrs:{id:"_3-4-1-时间管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-时间管理"}},[_._v("#")]),_._v(" 3.4.1. 时间管理")]),_._v(" "),v("p",[v("strong",[_._v("甘特图")]),_._v("：用水平线段表示任务的工作阶段；线段的起点和终点对应任务的开始和完成；线段的长度表示完成任务所需时间。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://static.xiaoliutalk.cn/img/202207272138273.svg",alt:""}})]),_._v(" "),v("p",[_._v("相关计算：")]),_._v(" "),v("p",[v("strong",[_._v("松弛时间")]),_._v("：关键路径所需时间 － 从节点开始到项目完成时间或该节点最晚开始时间－ 最早开始时间")]),_._v(" "),v("p",[v("strong",[_._v("最晚开始时间")]),_._v("：关键路径用时 － 该节点到项目完成用时。")]),_._v(" "),v("p",[v("strong",[_._v("最早开始时间")]),_._v("：项目开始到该节点需要的最长时间。")]),_._v(" "),v("p",[v("strong",[_._v("关键路径")]),_._v("：所有路径所需时间最长的路径为关键路径，也可以理解为松弛时间为 0 的任务构成了完成整个工程的关键路径。")]),_._v(" "),v("p",[_._v("甘特图优点： 清晰的描述每个任务从何时开始到何时结束以及各任务之间的井行性。\n甘特图缺点：不能反映任务之间的依赖关系，难以确定任务关键所在，也不能反映任务中有潜力部分。")])])}),[],!1,null,null,null);v.default=s.exports}}]);